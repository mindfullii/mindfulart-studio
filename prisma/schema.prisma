// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
  relationMode = "prisma"
}

enum PlanType {
  FREE
  PRO
  ENTERPRISE
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  credits       Int       @default(10)  // 初始赠送10个积分
  isSubscribed  Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 关联
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  subscription  Subscription?
  artworks      Artwork[]
  creditHistory CreditHistory[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Artwork {
  id          String    @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  prompt      String?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  tags        String[]
  downloads   Int       @default(0)
  createdAt   DateTime  @default(now())
}

model Subscription {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  plan          String    // FREE_SOUL or PEACEFUL_MIND
  status        String    // active, canceled, expired
  billingCycle  String    // monthly or annually
  startDate     DateTime  @default(now())
  endDate       DateTime?
  stripeCustomerId String?
  stripeSubscriptionId String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Transaction {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  amount          Float
  credits         Int
  transactionType String   // CREDITS_PURCHASE, SUBSCRIPTION_PAYMENT
  status          String   // SUCCESS, FAILED, PENDING
  createdAt       DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CreditHistory {
  id          String   @id @default(cuid())
  userId      String
  amount      Int      // 正数表示增加，负数表示消费
  type        String   // 'welcome' | 'purchase' | 'usage' | 'subscription'
  description String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
