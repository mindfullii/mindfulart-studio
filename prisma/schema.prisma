generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  credits       Int             @default(10)
  isSubscribed  Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  password      String?
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  subscription  Subscription?
  artworks      Artwork[]
  creditHistory CreditHistory[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Artwork {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  prompt      String?
  userId      String
  tags        String[]
  downloads   Int      @default(0)
  createdAt   DateTime @default(now())
  type        String   @default("coloring")
  user        User     @relation(fields: [userId], references: [id])
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String    @unique
  plan                 String
  status               String
  billingCycle         String
  startDate            DateTime  @default(now())
  endDate              DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id])
}

model Transaction {
  id              String   @id @default(cuid())
  userId          String
  amount          Float
  credits         Int
  transactionType String
  status          String
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CreditHistory {
  id          String   @id @default(cuid())
  userId      String
  amount      Int
  type        String
  description String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum PlanType {
  FREE
  PRO
  ENTERPRISE
}
