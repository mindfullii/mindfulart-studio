generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  displayName   String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  credits       Int             @default(10)
  isSubscribed  Boolean         @default(false)
  password      String?
  role          UserRole        @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  subscription  Subscription?
  artworks      Artwork[]
  creditHistory CreditHistory[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Artwork {
  id          String           @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  prompt      String?
  artistName  String?
  sourceUrl   String?
  featured    Boolean          @default(false)
  tags        String[]
  userId      String
  downloads   Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime
  type        ArtworkType
  source      ArtworkSource    @default(USER)
  category    ArtworkCategory?
  user        User             @relation(fields: [userId], references: [id])

  @@index([category])
  @@index([source])
  @@index([type])
  @@index([userId])
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String    @unique
  plan                 String
  status               String
  billingCycle         String
  startDate            DateTime  @default(now())
  endDate              DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id])
}

model Transaction {
  id              String   @id @default(cuid())
  userId          String
  amount          Float
  credits         Int
  transactionType String
  status          String
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CreditHistory {
  id          String   @id @default(cuid())
  userId      String
  amount      Int
  type        String
  description String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ExploreCollection {
  id          String           @id @default(cuid())
  title       String
  description String?
  coverUrl    String
  type        ArtworkCategory
  featured    Boolean         @default(false)
  downloads   Int            @default(0)
  tags        String[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  artworks    ExploreArtwork[]

  @@index([type])
}

model ExploreArtwork {
  id               String           @id @default(cuid())
  title            String
  description      String?
  imageUrl         String
  downloadUrls     Json            // {png: string, pdf: string}
  tags             String[]
  featured         Boolean         @default(false)
  downloads        Int            @default(0)
  artistName       String?
  artistUrl        String?
  orderInCollection Int?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  type             ArtworkCategory
  collectionId     String?
  collection       ExploreCollection? @relation(fields: [collectionId], references: [id])

  @@index([type])
  @@index([collectionId])
}

enum ArtworkCategory {
  COLORINGPAGES
  COLORFULVISUAL
}

enum ArtworkSource {
  USER
  ADMIN
}

enum ArtworkType {
  VISION
  COLORING
  MEDITATION
}

enum UserRole {
  USER
  ADMIN
}
